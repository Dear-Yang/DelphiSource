program Project1;

{$APPTYPE CONSOLE}

{$R *.res}


{*------------------------------------------------------------------------------

  多态：
        封装、继承、多态
        一类事物以多种形态存在，例如：动物类-狗类、猫类的关系

        前提：
          两个类具备继承（派生）和实现这两种关系的一种

        体现：
            父类接收或指向其子类对象

  作用：
      提高代码重复性，方便我们对代码进行解耦 （类和类之间不要出现直接的依赖关系）
      耦合：


-------------------------------------------------------------------------------}

uses
    System.SysUtils,
    Unit1 in 'Unit1.pas';

var
    Aniaml: TAnimal;
    ColorDog: IColor;


begin
    Aniaml := TDog.Create;
    //ColorDog := tdog.Create;
    Aniaml.Run;
    Readln;
end.

